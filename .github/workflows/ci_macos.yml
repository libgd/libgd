name: CI macOS

on:
  push:
    branches: [master, GD-*]
  pull_request:
    branches: [master, GD-*]

permissions: 
  contents: read

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RELWITHDEBINFO

jobs:
  CI:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [ "macOS (10.15) - Xcode 12.3" ]
        os: [ macos-latest ]
        sanitize: [ false ]
        build:
          - { shell: bash }
        include:
          - name: "macOS (10.15) - Xcode 12.3"
            os:  macOS-latest
            build: { shell: bash }
#          - name: "macOS (10.15) - Xcode 12.3 - M1"
#            os: macos-m1
#            build: { shell: "/usr/bin/arch -arch arm64e /bin/bash -l {0}" }

    defaults:
      run:
        shell: ${{ matrix.build.shell }} 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install libheif libjpeg-turbo libimagequant libde265 x265

      - name: Prepare environment

        run: |
          sudo xcode-select --switch /Library/Developer/CommandLineTools/
          echo "JOBS=$(sysctl -n hw.logicalcpu)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/opt/jpeg-turbo/lib/pkgconfig" >> $GITHUB_ENV
          echo "CFLAGS=-I/opt/X11/include"  >> $GITHUB_ENV
          echo "CPATH=/usr/local/include"  >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=/usr/local/lib:/usr/local/opt/openssl/include" >> $GITHUB_ENV
          echo "LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
          LIBPNG_VERSION=$(pkg-config --modversion libpng)
          echo "LIBPNG_VERSION=${LIBPNG_VERSION}" >> $GITHUB_ENV
          pkg-config --libs --cflags libpng
          pkg-config --libs libpng
          pkg-config --libs --cflags libpng16
          pkg-config --libs libpng16
          ls /opt/homebrew/Cellar/libpng/$LIBPNG_VERSION/
          ls /opt/homebrew/Cellar/libpng/$LIBPNG_VERSION/lib/
          ${{github.workspace}}/.github/scripts/removemono.sh

      - name: Configure CMake
        run:  cmake -DENABLE_PNG=1 -DENABLE_FREETYPE=1 -DENABLE_JPEG=1 -DENABLE_WEBP=1
              -DENABLE_TIFF=1  -DENABLE_GD_FORMATS=1 -DENABLE_CPP=0 -DENABLE_HEIF=1 -D CMAKE_PREFIX_PATH=/usr/local
              -DBUILD_TEST=1 -DVERBOSE_MAKEFILE=1 -DPNG_PNG_INCLUDE_DIR=/opt/homebrew/Cellar/libpng/${{ env.LIBPNG_VERSION }}/include -DPNG_PNG_LIBRARY_DIR=/usr/local/Cellar/libpng/${{ env.LIBPNG_VERSION }}/lib -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 4

      - name: Test
        working-directory: ${{github.workspace}}/build
        run: |
          export TMP=${{runner.temp}}
          echo "TMP=${{github.temp}}" >> $GITHUB_ENV
          echo "LSAN_OPTIONS=suppressions=${{ github.workspace }}/suppressions/lsan.supp" >> $GITHUB_ENV
          CTEST_OUTPUT_ON_FAILURE=1 ctest -C ${{env.BUILD_TYPE}}

      - name: Output Log
        if: contains(matrix.os, 'ubuntu')
        run: |
          if test -f "/home/runner/work/libgd/libgd/build/Testing/Temporary/LastTest.log"; then
              cat /home/runner/work/libgd/libgd/build/Testing/Temporary/LastTest.log
          fi
